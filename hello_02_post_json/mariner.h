
//============================================================================================
// Do not edit. This file generated by /home/ubuntu/DDLParser/ddlt/ddlt on 24 April 2012 06:20
//============================================================================================
#include <stdio.h>
#include <stdint.h>
#include <string.h>
#include "JsonWriteScope.h"

//================================================================================
// Select Weapon
//================================================================================

class Weapon //
{
  private:
    uint32_t m_Value;

  public:
    enum
    {

      kFist = 0x5a513adaUL, // Bare hands

      kChainsaw = 0x4f3bf077UL, // A la Chainsaw Massacre

      kPistol = 0xce3515ebUL, // Simple pistol

      kShotgun = 0x57ab09a1UL, // A single-barrel shotgun

      kChaingun = 0x1ed1844eUL, // A machine gun

      kRocketLauncher = 0x7ea174f1UL, // Portable rocket launcher

      kPlasmaGun = 0x64287f97UL, // Plasma gun

      kBFG9000 = 0x5b45e13eUL, // *The* BFG 9000

    };

    inline bool Init()
    {
      m_Value = kPistol;
      return true;
    }

    inline void Destroy() {}

    inline uint32_t Get() const
    {
      return m_Value;
    }

    void        Set ( uint32_t value );
    const char* GetName ( uint32_t value );
    bool        WriteJson ( JsonWriteScope* parent_scope, const char* name = NULL );
};

//================================================================================
// Struct Position
//================================================================================

class Position //
{
  private:

    float m_X; //

    float m_Y; //

    float m_Angle; // The direction the player is looking at ( degrees )


  public:
    bool Init();
    bool WriteJson ( char*& output, size_t& size, const char* name = NULL );
    bool WriteJson ( JsonWriteScope* parent_scope, const char* name = NULL );


    inline float GetX() const
    {
      return m_X;
    }

    inline void SetX ( float value )
    {
      m_X = value;
    }

    inline float GetY() const
    {
      return m_Y;
    }

    inline void SetY ( float value )
    {
      m_Y = value;
    }

    inline float GetAngle() const
    {
      return m_Angle;
    }

    inline void SetAngle ( float value )
    {
      m_Angle = value;
    }

};

//================================================================================
// Struct Mariner
//================================================================================

class Mariner //
{
  private:

    uint32_t m_Health; // The player's health

    Weapon m_Weapon; // The player's current weapon

    char m_Name[ 256 ]; // The player's name for multiplayer sessions

    Position m_Position; // The player's position

    char m_Timestamp[ 256 ]; //


  public:
    bool Init();
    bool WriteJson ( char*& output, size_t& size, const char* name = NULL );
    bool WriteJson ( JsonWriteScope* parent_scope, const char* name = NULL );


    inline uint32_t GetHealth() const
    {
      return m_Health;
    }

    inline void SetHealth ( uint32_t value )
    {
      m_Health = value;
    }

    inline Weapon* GetWeapon()
    {
      return &m_Weapon;
    }

    inline const char* GetName() const
    {
      return m_Name;
    }

    inline void SetName ( const char* value )
    {
      strncpy ( m_Name, value, sizeof ( m_Name ) );
    }

    inline Position* GetPosition()
    {
      return &m_Position;
    }

    inline const char* GetTimestamp() const
    {
      return m_Timestamp;
    }

    inline void SetTimestamp ( const char* value )
    {
      strncpy ( m_Timestamp, value, sizeof ( m_Timestamp ) );
    }

};
